{
  "swagger": "2.0",
  "info": {
    "title": "CRDOpenAPI",
    "version": "v1.15.2"
  },
  "paths": {
  
  
  
  
  "/apis/helm.fluxcd.io/v1/namespaces/{namespace}/helmreleases": {
    "parameters": [
      {
        "uniqueItems": true,
        "type": "string",
        "description": "If 'true', then the output is pretty printed.",
        "name": "pretty",
        "in": "query"
      },
      {
        "name": "namespace",
        "in": "path",
        "required": true,
        "description": "The custom resource's namespace",
        "type": "string"
      }
    ],
    "get": {
      "operationId": "listNamespacedHelmRelease",
      "description": "list or watch namespace scoped HelmRelease",
      "tags": [
        "v1_helmrelease"
      ],
      "consumes": [
        "*/*"
      ],
      "produces": [
        "application/json",
        "application/json;stream=watch"
      ],
      "schemes": [
        "https"
      ],
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "name": "fieldSelector",
          "in": "query"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "name": "labelSelector",
          "in": "query"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
          "name": "resourceVersion",
          "in": "query"
        },
        {
          "uniqueItems": true,
          "type": "integer",
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "name": "timeoutSeconds",
          "in": "query"
        },
        {
          "name": "watch",
          "uniqueItems": true,
          "type": "boolean",
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.",
          "in": "query"
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "#/definitions/v1.HelmReleaseList"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    },
    "post": {
      "operationId": "createNamespacedHelmRelease",
      "description": "Creates a namespace scoped HelmRelease",
      "produces": [
        "application/json"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "v1_helmrelease"
      ],
      "parameters": [
        {
          "name": "body",
          "in": "body",
          "required": true,
          "description": "The JSON schema of the Resource to create.",
          "schema": {
              "$ref": "#/definitions/v1.HelmRelease"
          }
        }
      ],
      "responses": {
        "201": {
          "description": "Created",
          "schema": {
            "$ref": "#/definitions/v1.HelmRelease"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    }
  },
  "/apis/helm.fluxcd.io/v1/namespaces/{namespace}/helmreleases/{name}": {
    "parameters": [
      {
        "name": "namespace",
        "in": "path",
        "required": true,
        "description": "The custom resource's namespace",
        "type": "string"
      },
      {
        "name": "name",
        "in": "path",
        "required": true,
        "description": "the custom object's name",
        "type": "string"
      }
    ],
    "get": {
      "operationId": "getNamespacedHelmRelease",
      "description": "Returns a namespace scoped HelmRelease",
      "consumes": [
        "*/*"
      ],
      "produces": [
        "application/json"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "v1_helmrelease"
      ],
      "responses": {
        "200": {
          "description": "A single Resource",
          "schema": {
            "$ref": "#/definitions/v1.HelmRelease"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    },
    "delete": {
      "operationId": "deleteNamespacedHelmRelease",
      "description": "Deletes the specified namespace scoped HelmRelease",
      "consumes": [
        "*/*"
      ],
      "produces": [
        "application/json"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "v1_helmrelease"
      ],
      "parameters": [
        {
          "name": "v1.DeleteOptions",
          "in": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/v1.DeleteOptions"
          }
        },
        {
          "name": "gracePeriodSeconds",
          "uniqueItems": true,
          "type": "integer",
          "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
          "in": "query"
        },
        {
          "name": "orphanDependents",
          "uniqueItems": true,
          "type": "boolean",
          "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
          "in": "query"
        },
        {
          "name": "propagationPolicy",
          "uniqueItems": true,
          "type": "string",
          "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.",
          "in": "query"
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "#/definitions/v1.Status"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    },
    "patch": {
      "operationId": "patchNamespacedHelmRelease",
      "description": "patch the specified namespace scoped HelmRelease",
      "consumes": [
        "application/json-patch+json",
        "application/merge-patch+json"
      ],
      "produces": [
        "application/json"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "v1_helmrelease"
      ],
      "parameters": [
        {
          "name": "body",
          "in": "body",
          "required": true,
          "description": "The JSON schema of the Resource to patch.",
          "schema": {
            "type": "object"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "#/definitions/v1.HelmRelease"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    },
    "put": {
      "operationId": "replaceNamespacedHelmRelease",
      "description": "replace the specified namespace scoped HelmRelease",
      "consumes": [
        "*/*"
      ],
      "produces": [
        "application/json"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "v1_helmrelease"
      ],
      "parameters": [
        {
          "name": "body",
          "in": "body",
          "required": true,
          "description": "The JSON schema of the Resource to replace.",
          "schema": {
            "$ref": "#/definitions/v1.HelmRelease"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "#/definitions/v1.HelmRelease"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    }
  }
  
  
  ,
  "/apis/helm.fluxcd.io/v1/namespaces/{namespace}/helmreleases/{name}/status": {
    "parameters": [
      {
        "name": "group",
        "in": "path",
        "required": true,
        "description": "the custom resource's group",
        "type": "string"
      },
      {
        "name": "version",
        "in": "path",
        "required": true,
        "description": "the custom resource's version",
        "type": "string"
      },
      {
        "name": "namespace",
        "in": "path",
        "required": true,
        "description": "The custom resource's namespace",
        "type": "string"
      },
      {
        "name": "plural",
        "in": "path",
        "required": true,
        "description": "the custom resource's plural name. For TPRs this would be lowercase plural kind.",
        "type": "string"
      },
      {
        "name": "name",
        "in": "path",
        "required": true,
        "description": "the custom object's name",
        "type": "string"
      }
    ],
    "get": {
      "description": "read status of the specified namespace scoped custom object",
      "consumes": [
        "*/*"
      ],
      "produces": [
        "application/json",
        "application/yaml",
        "application/vnd.kubernetes.protobuf"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "v1_helmrelease"
      ],
      "operationId": "getNamespacedCustomObjectStatus",
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "type": "object"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    },
    "put": {
      "description": "replace status of the specified namespace scoped custom object",
      "consumes": [
        "*/*"
      ],
      "produces": [
        "application/json",
        "application/yaml",
        "application/vnd.kubernetes.protobuf"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "v1_helmrelease"
      ],
      "operationId": "replaceNamespacedCustomObjectStatus",
      "parameters": [
        {
          "name": "body",
          "in": "body",
          "required": true,
          "schema": {
            "type": "object"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "type": "object"
          }
        },
        "201": {
          "description": "Created",
          "schema": {
            "type": "object"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    },
    "patch": {
      "description": "partially update status of the specified namespace scoped custom object",
      "consumes": [
        "application/json-patch+json",
        "application/merge-patch+json"
      ],
      "produces": [
        "application/json",
        "application/yaml",
        "application/vnd.kubernetes.protobuf"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "v1_helmrelease"
      ],
      "operationId": "patchNamespacedCustomObjectStatus",
      "parameters": [
        {
          "name": "body",
          "in": "body",
          "required": true,
          "schema": {
            "description": "The JSON schema of the Resource to patch.",
            "type": "object"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "type": "object"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    }
  }
  
  
  
  
}
,
  "definitions": {
  
  "v1.HelmRelease": {
    "type": "object",
    "properties": {
      "apiVersion": {
        "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
        "type": "string"
      },
      "kind": {
        "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
        "type": "string"
      },
      "metadata": {
        "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
        "$ref": "#/definitions/v1.ObjectMeta"
      }
      
      
      
      
      
      
      
      
      , "spec": {"properties": {"chart": {"properties": {"chartPullSecret": {"description": "ChartPullSecret holds the reference to the authentication secret for accessing the Helm repository using HTTPS basic auth. NOT IMPLEMENTED!", "properties": {"name": {"type": "string"}}, "required": ["name"], "type": "object"}, "git": {"description": "Git URL is the URL of the Git repository, e.g. `git@github.com:org/repo`, `http://github.com/org/repo`, or `ssh://git@example.com:2222/org/repo.git`.", "type": "string"}, "name": {"description": "Name is the name of the Helm chart _without_ an alias, e.g. redis (for `helm upgrade [flags] stable/redis`).", "type": "string"}, "path": {"description": "Path is the path to the chart relative to the repository root.", "type": "string"}, "ref": {"description": "Ref is the Git branch (or other reference) to use. Defaults to \u0027master\u0027, or the configured default Git ref.", "type": "string"}, "repository": {"description": "RepoURL is the URL of the Helm repository, e.g. `https://kubernetes-charts.storage.googleapis.com` or `https://charts.example.com`.", "type": "string"}, "secretRef": {"description": "SecretRef holds the authentication secret for accessing the Git repository (over HTTPS). The credentials will be added to an HTTPS GitURL before the mirror is started.", "properties": {"name": {"type": "string"}, "namespace": {"type": "string"}}, "required": ["name"], "type": "object"}, "skipDepUpdate": {"description": "SkipDepUpdate will tell the operator to skip running \u0027helm dep update\u0027 before installing or upgrading the chart, the chart dependencies _must_ be present for this to succeed.", "type": "boolean"}, "version": {"description": "Version is the targeted Helm chart version, e.g. 7.0.1.", "type": "string"}}, "type": "object"}, "disableOpenAPIValidation": {"description": "DisableOpenAPIValidation controls whether OpenAPI validation is enforced.", "type": "boolean"}, "forceUpgrade": {"description": "Force will mark this Helm release to `--force` upgrades. This forces the resource updates through delete/recreate if needed.", "type": "boolean"}, "helmVersion": {"description": "HelmVersion is the version of Helm to target. If not supplied, the lowest _enabled Helm version_ will be targeted. Valid HelmVersion values are: \"v2\", \"v3\"", "enum": ["v2", "v3"], "type": "string"}, "maxHistory": {"description": "MaxHistory is the maximum amount of revisions to keep for the Helm release. If not supplied, it defaults to 10.", "type": "integer"}, "releaseName": {"description": "ReleaseName is the name of the The Helm release. If not supplied, it will be generated by affixing the namespace to the resource name.", "type": "string"}, "resetValues": {"description": "ResetValues will mark this Helm release to reset the values to the defaults of the targeted chart before performing an upgrade. Not explicitly setting this to `false` equals to `true` due to the declarative nature of the operator.", "type": "boolean"}, "rollback": {"description": "The rollback settings for this Helm release.", "properties": {"disableHooks": {"description": "DisableHooks will mark this Helm release to prevent hooks from running during the rollback.", "type": "boolean"}, "enable": {"description": "Enable will mark this Helm release for rollbacks.", "type": "boolean"}, "force": {"description": "Force will mark this Helm release to `--force` rollbacks. This forces the resource updates through delete/recreate if needed.", "type": "boolean"}, "maxRetries": {"description": "MaxRetries is the maximum amount of upgrade retries the operator should make before bailing.", "format": "int64", "type": "integer"}, "recreate": {"description": "Recreate will mark this Helm release to `--recreate-pods` for if applicable. This performs pod restarts.", "type": "boolean"}, "retry": {"description": "Retry will mark this Helm release for upgrade retries after a rollback.", "type": "boolean"}, "timeout": {"description": "Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during rollback.", "format": "int64", "type": "integer"}, "wait": {"description": "Wait will mark this Helm release to wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful.", "type": "boolean"}}, "type": "object"}, "skipCRDs": {"description": "SkipCRDs will mark this Helm release to skip the creation of CRDs during a Helm 3 installation.", "type": "boolean"}, "targetNamespace": {"description": "TargetNamespace overrides the targeted namespace for the Helm release. The default namespace equals to the namespace of the HelmRelease resource.", "type": "string"}, "test": {"description": "The test settings for this Helm release.", "properties": {"cleanup": {"description": "Cleanup, when targeting Helm 2, determines whether to delete test pods between each test run initiated by the Helm Operator.", "type": "boolean"}, "enable": {"description": "Enable will mark this Helm release for tests.", "type": "boolean"}, "ignoreFailures": {"description": "IgnoreFailures will cause a Helm release to be rolled back if it fails otherwise it will be left in a released state", "type": "boolean"}, "timeout": {"description": "Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during test.", "format": "int64", "type": "integer"}}, "type": "object"}, "timeout": {"description": "Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during installation and upgrade operations.", "format": "int64", "type": "integer"}, "valueFileSecrets": {"description": "ValueFileSecrets holds the local name references to secrets. DEPRECATED, use ValuesFrom.secretKeyRef instead.", "items": {"properties": {"name": {"type": "string"}}, "required": ["name"], "type": "object"}, "type": "array"}, "values": {"description": "Values holds the values for this Helm release.", "type": "object"}, "valuesFrom": {"items": {"properties": {"chartFileRef": {"description": "The reference to a local chart file with release values.", "properties": {"optional": {"description": "Optional will mark this ChartFileSelector as optional. The result of this are that operations are permitted without the source, due to it e.g. being temporarily unavailable.", "type": "boolean"}, "path": {"description": "Path is the file path to the source relative to the chart root.", "type": "string"}}, "required": ["path"], "type": "object"}, "configMapKeyRef": {"description": "The reference to a config map with release values.", "properties": {"key": {"type": "string"}, "name": {"type": "string"}, "namespace": {"type": "string"}, "optional": {"type": "boolean"}}, "required": ["name"], "type": "object"}, "externalSourceRef": {"description": "The reference to an external source with release values.", "properties": {"optional": {"description": "Optional will mark this ExternalSourceSelector as optional. The result of this are that operations are permitted without the source, due to it e.g. being temporarily unavailable.", "type": "boolean"}, "url": {"description": "URL is the URL of the external source.", "type": "string"}}, "required": ["url"], "type": "object"}, "secretKeyRef": {"description": "The reference to a secret with release values.", "properties": {"key": {"type": "string"}, "name": {"type": "string"}, "namespace": {"type": "string"}, "optional": {"type": "boolean"}}, "required": ["name"], "type": "object"}}, "type": "object"}, "type": "array"}, "wait": {"description": "Wait will mark this Helm release to wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful.", "type": "boolean"}}, "required": ["chart"], "type": "object"}
      
      
      
      , "status": {"description": "HelmReleaseStatus contains status information about an HelmRelease.", "properties": {"conditions": {"description": "Conditions contains observations of the resource\u0027s state, e.g., has the chart which it refers to been fetched.", "items": {"properties": {"lastTransitionTime": {"description": "LastTransitionTime is the timestamp corresponding to the last status change of this condition.", "format": "date-time", "type": "string"}, "lastUpdateTime": {"description": "LastUpdateTime is the timestamp corresponding to the last status update of this condition.", "format": "date-time", "type": "string"}, "message": {"description": "Message is a human readable description of the details of the last transition, complementing reason.", "type": "string"}, "reason": {"description": "Reason is a brief machine readable explanation for the condition\u0027s last transition.", "type": "string"}, "status": {"description": "Status of the condition, one of (\u0027True\u0027, \u0027False\u0027, \u0027Unknown\u0027).", "enum": ["True", "False", "Unknown"], "type": "string"}, "type": {"description": "Type of the condition, one of (\u0027ChartFetched\u0027, \u0027Deployed\u0027, \u0027Released\u0027, \u0027RolledBack\u0027, \u0027Tested\u0027).", "enum": ["ChartFetched", "Deployed", "Released", "RolledBack", "Tested"], "type": "string"}}, "required": ["status", "type"], "type": "object"}, "type": "array"}, "lastAttemptedRevision": {"description": "LastAttemptedRevision is the revision of the latest chart sync, and may be of a failed release.", "type": "string"}, "observedGeneration": {"description": "ObservedGeneration is the most recent generation observed by the operator.", "format": "int64", "type": "integer"}, "phase": {"description": "Phase the release is in, one of (\u0027ChartFetched\u0027, \u0027ChartFetchFailed\u0027, \u0027Installing\u0027, \u0027Upgrading\u0027, \u0027Deployed\u0027, \u0027DeployFailed\u0027, \u0027Testing\u0027, \u0027TestFailed\u0027, \u0027Tested\u0027, \u0027Succeeded\u0027, \u0027RollingBack\u0027, \u0027RolledBack\u0027, \u0027RollbackFailed\u0027)", "enum": ["ChartFetched", "ChartFetchFailed", "Installing", "Upgrading", "Deployed", "DeployFailed", "Testing", "TestFailed", "Tested", "Succeeded", "Failed", "RollingBack", "RolledBack", "RollbackFailed"], "type": "string"}, "releaseName": {"description": "ReleaseName is the name as either supplied or generated.", "type": "string"}, "releaseStatus": {"description": "ReleaseStatus is the status as given by Helm for the release managed by this resource.", "type": "string"}, "revision": {"description": "Revision holds the Git hash or version of the chart currently deployed.", "type": "string"}, "rollbackCount": {"description": "RollbackCount records the amount of rollback attempts made, it is incremented after a rollback failure and reset after a successful upgrade or revision change.", "format": "int64", "type": "integer"}}, "type": "object"}
      
      
    }
  },
  "v1.HelmReleaseList": {
    "description": "HelmReleaseList is a list of HelmRelease",
    "required": [
      "items"
    ],
    "properties": {
      "apiVersion": {
        "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
        "type": "string"
      },
      "items": {
        "description": "List of helmreleases. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md",
        "type": "array",
        "items": {
          "$ref": "#/definitions/v1.HelmRelease"
        }
      },
      "kind": {
        "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
        "type": "string"
      },
      "metadata": {
        "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
        "type": "object",
        "properties": {
          "continue": {
            "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
            "type": "string"
          },
          "remainingItemCount": {
            "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.\n\nThis field is alpha and can be changed or removed without notice.",
            "type": "integer",
            "format": "int64"
          },
          "resourceVersion": {
            "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
            "type": "string"
          },
          "selfLink": {
            "description": "selfLink is a URL representing this object. Populated by the system. Read-only.",
            "type": "string"
          }
        }
      }
    }
  }
  
}

}
